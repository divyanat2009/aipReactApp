{"ast":null,"code":"export const FilterPosts = (posts, currentDisplay) => {\n  // let currentUserInfo = users.find(user=>user.user_id===currentUserId);\n  let filteredPosts = posts; //using buttons for filtering  by type of post (book, recipe, etc)\n\n  if (currentDisplay.dashboard.current_post_type !== 'all') {\n    filteredPosts = filteredPosts.filter(post => post.post_type === currentDisplay.dashboard.current_post_type);\n  } //need to sort by date/time  \n\n\n  return filteredPosts;\n}; //function to find the userid that corresponds to an entered username\n\n_c = FilterPosts;\nexport const FindUserId = (usernameInput, users) => {\n  let lowerCaseUserNameInput = usernameInput.toLowerCase();\n  let user = users.find(user => user.username === lowerCaseUserNameInput);\n\n  if (user) {\n    return user.id;\n  } else {\n    return;\n  }\n}; //function to determine of current post is bookmarked by current user\n\n_c2 = FindUserId;\nexport const isCurrentlyBookmarked = (post_id, bookmarks) => {\n  let bookmarkedPostIds = bookmarks.map(bookmark => bookmark.post_id);\n  let bookmarked = bookmarkedPostIds.findIndex(id => post_id === id);\n\n  if (bookmarked !== -1) {\n    let bookmarkId = findBookmarkId(post_id, bookmarks);\n    return bookmarkId;\n  } else {\n    return false;\n  }\n};\n\nconst findBookmarkId = (post_id, bookmarks) => {\n  let bookmarkId = bookmarks.find(bookmark => bookmark.post_id === post_id).bookmark_id;\n  return bookmarkId;\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FilterPosts\");\n$RefreshReg$(_c2, \"FindUserId\");","map":{"version":3,"sources":["C:/Users/divya/Documents/projects/aipBasicReactApp/src/Functions/FilterResults.js"],"names":["FilterPosts","posts","currentDisplay","filteredPosts","dashboard","current_post_type","filter","post","post_type","FindUserId","usernameInput","users","lowerCaseUserNameInput","toLowerCase","user","find","username","id","isCurrentlyBookmarked","post_id","bookmarks","bookmarkedPostIds","map","bookmark","bookmarked","findIndex","bookmarkId","findBookmarkId","bookmark_id"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAOC,cAAP,KAAyB;AAClD;AAEC,MAAIC,aAAa,GAAGF,KAApB,CAHiD,CAIjD;;AACA,MAAGC,cAAc,CAACE,SAAf,CAAyBC,iBAAzB,KAA6C,KAAhD,EAAsD;AAClDF,IAAAA,aAAa,GAAGA,aAAa,CAACG,MAAd,CAAqBC,IAAI,IAAEA,IAAI,CAACC,SAAL,KAAiBN,cAAc,CAACE,SAAf,CAAyBC,iBAArE,CAAhB;AACH,GAPgD,CASjD;;;AACA,SAAOF,aAAP;AACF,CAXM,C,CAaP;;KAbaH,W;AAcb,OAAO,MAAMS,UAAU,GAAG,CAACC,aAAD,EAAgBC,KAAhB,KAAwB;AAC/C,MAAIC,sBAAsB,GAAGF,aAAa,CAACG,WAAd,EAA7B;AACA,MAAIC,IAAI,GAAGH,KAAK,CAACI,IAAN,CAAWD,IAAI,IAAEA,IAAI,CAACE,QAAL,KAAgBJ,sBAAjC,CAAX;;AACA,MAAGE,IAAH,EAAQ;AACN,WAAOA,IAAI,CAACG,EAAZ;AAAe,GADjB,MAEI;AAAC;AAAO;AACd,CANM,C,CAOL;;MAPWR,U;AAQb,OAAO,MAAMS,qBAAqB,GAAC,CAACC,OAAD,EAAUC,SAAV,KAAsB;AACvD,MAAIC,iBAAiB,GAAGD,SAAS,CAACE,GAAV,CAAcC,QAAQ,IAAEA,QAAQ,CAACJ,OAAjC,CAAxB;AACA,MAAIK,UAAU,GAAGH,iBAAiB,CAACI,SAAlB,CAA4BR,EAAE,IAAIE,OAAO,KAAGF,EAA5C,CAAjB;;AACA,MAAGO,UAAU,KAAG,CAAC,CAAjB,EAAmB;AACf,QAAIE,UAAU,GAAGC,cAAc,CAACR,OAAD,EAAUC,SAAV,CAA/B;AACA,WAAOM,UAAP;AACH,GAHD,MAIK;AAAC,WAAO,KAAP;AAAa;AACpB,CARM;;AAUP,MAAMC,cAAc,GAAC,CAACR,OAAD,EAASC,SAAT,KAAqB;AACxC,MAAIM,UAAU,GAAGN,SAAS,CAACL,IAAV,CAAeQ,QAAQ,IAAEA,QAAQ,CAACJ,OAAT,KAAmBA,OAA5C,EAAqDS,WAAtE;AACA,SAAOF,UAAP;AACD,CAHD","sourcesContent":["export const FilterPosts = (posts,currentDisplay) =>{\r\n  // let currentUserInfo = users.find(user=>user.user_id===currentUserId);\r\n   \r\n   let filteredPosts = posts;\r\n   //using buttons for filtering  by type of post (book, recipe, etc)\r\n   if(currentDisplay.dashboard.current_post_type!=='all'){\r\n       filteredPosts = filteredPosts.filter(post=>post.post_type===currentDisplay.dashboard.current_post_type)\r\n   }\r\n\r\n   //need to sort by date/time  \r\n   return filteredPosts\r\n}\r\n\r\n//function to find the userid that corresponds to an entered username\r\nexport const FindUserId = (usernameInput, users)=>{\r\n   let lowerCaseUserNameInput = usernameInput.toLowerCase();\r\n   let user = users.find(user=>user.username===lowerCaseUserNameInput)\r\n   if(user){\r\n     return user.id}\r\n   else{return}\r\n}\r\n  //function to determine of current post is bookmarked by current user\r\nexport const isCurrentlyBookmarked=(post_id, bookmarks)=>{\r\n  let bookmarkedPostIds = bookmarks.map(bookmark=>bookmark.post_id);\r\n  let bookmarked = bookmarkedPostIds.findIndex(id => post_id===id);\r\n  if(bookmarked!==-1){\r\n      let bookmarkId = findBookmarkId(post_id, bookmarks)\r\n      return bookmarkId\r\n  }\r\n  else {return false}\r\n}\r\n\r\nconst findBookmarkId=(post_id,bookmarks)=>{\r\n  let bookmarkId = bookmarks.find(bookmark=>bookmark.post_id===post_id).bookmark_id;\r\n  return bookmarkId\r\n}"]},"metadata":{},"sourceType":"module"}