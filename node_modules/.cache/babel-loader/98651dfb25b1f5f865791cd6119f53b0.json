{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\divya\\\\Documents\\\\projects\\\\aipBasicReactApp\\\\src\\\\Components\\\\IconButton.js\";\nimport React, { Component } from 'react';\nimport Context from '../Context';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Tooltip from './Tooltip';\n\nclass IconButton extends Component {\n  render() {\n    //change the icon depending if on the dashboard or bookmark page\n    const {\n      ariaLabel,\n      iconType,\n      displayChange,\n      link,\n      buttonColor,\n      tooltipMessage,\n      tooltipClass,\n      pageType\n    } = this.props;\n    let currentDisplay = this.context.currentDisplay;\n    let activeTypeClass = '';\n    let activeUserClass = '';\n\n    if (pageType) {\n      activeUserClass = currentDisplay[pageType].current_user;\n      activeTypeClass = currentDisplay[pageType].current_post_type;\n    }\n\n    let tooltip = /*#__PURE__*/_jsxDEV(Tooltip, {\n      message: `${tooltipMessage}.`,\n      positionClass: tooltipClass\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 19\n    }, this);\n\n    let button = /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }, this);\n\n    if (iconType === 'text-all') {\n      button = /*#__PURE__*/_jsxDEV(Link, {\n        to: link,\n        \"aria-label\": `button-access ${ariaLabel}`,\n        onClick: e => {\n          this.context.updatePostType(displayChange);\n          this.context.updateUsernameToDisplay(displayChange);\n        },\n        className: `button-icon-link button-w-text ${buttonColor} ${activeUserClass}-activeUsers ${activeTypeClass}-activeType`,\n        children: [\"All\", tooltip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 19\n      }, this);\n    } else {\n      button = /*#__PURE__*/_jsxDEV(Link, {\n        to: link,\n        \"aria-label\": `button-access ${ariaLabel}`,\n        onClick: e => {\n          this.context.updatePostType(displayChange);\n          this.context.updateUsernameToDisplay(displayChange);\n        },\n        className: `button-icon-link ${buttonColor} ${activeUserClass}-activeUsers ${activeTypeClass}-activeType`,\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"filter-icon\",\n          icon: iconType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this), tooltip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"icon-button-container\",\n      children: button\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nIconButton.contextType = Context;\nexport default IconButton;","map":{"version":3,"sources":["C:/Users/divya/Documents/projects/aipBasicReactApp/src/Components/IconButton.js"],"names":["React","Component","Context","Link","FontAwesomeIcon","Tooltip","IconButton","render","ariaLabel","iconType","displayChange","link","buttonColor","tooltipMessage","tooltipClass","pageType","props","currentDisplay","context","activeTypeClass","activeUserClass","current_user","current_post_type","tooltip","button","e","updatePostType","updateUsernameToDisplay","contextType"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAkC;AAE9BM,EAAAA,MAAM,GAAE;AACR;AACA,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,QAAZ;AAAsBC,MAAAA,aAAtB;AAAqCC,MAAAA,IAArC;AAA2CC,MAAAA,WAA3C;AAAwDC,MAAAA,cAAxD;AAAwEC,MAAAA,YAAxE;AAAsFC,MAAAA;AAAtF,QAAkG,KAAKC,KAA7G;AACA,QAAIC,cAAc,GAAE,KAAKC,OAAL,CAAaD,cAAjC;AACA,QAAIE,eAAe,GAAC,EAApB;AACA,QAAIC,eAAe,GAAC,EAApB;;AACA,QAAGL,QAAH,EAAY;AACVK,MAAAA,eAAe,GAAGH,cAAc,CAACF,QAAD,CAAd,CAAyBM,YAA3C;AACAF,MAAAA,eAAe,GAAGF,cAAc,CAACF,QAAD,CAAd,CAAyBO,iBAA3C;AACD;;AAED,QAAIC,OAAO,gBAAG,QAAC,OAAD;AAAS,MAAA,OAAO,EAAG,GAAEV,cAAe,GAApC;AAAwC,MAAA,aAAa,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAAd;;AACA,QAAIU,MAAM,gBAAI;AAAA;AAAA;AAAA;AAAA,YAAd;;AACA,QAAGf,QAAQ,KAAG,UAAd,EAAyB;AACrBe,MAAAA,MAAM,gBAAI,QAAC,IAAD;AACD,QAAA,EAAE,EAAEb,IADH;AAED,sBAAa,iBAAgBH,SAAU,EAFtC;AAGD,QAAA,OAAO,EAAEiB,CAAC,IAAE;AAAC,eAAKP,OAAL,CAAaQ,cAAb,CAA4BhB,aAA5B;AAA4C,eAAKQ,OAAL,CAAaS,uBAAb,CAAqCjB,aAArC;AAAqD,SAH7G;AAID,QAAA,SAAS,EAAG,kCAAiCE,WAAY,IAAGQ,eAAgB,gBAAeD,eAAgB,aAJ1G;AAAA,0BAMAI,OANA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAV;AAOmB,KARvB,MASI;AACFC,MAAAA,MAAM,gBAAI,QAAC,IAAD;AACA,QAAA,EAAE,EAAEb,IADJ;AAEA,sBAAa,iBAAgBH,SAAU,EAFvC;AAGA,QAAA,OAAO,EAAEiB,CAAC,IAAE;AAAC,eAAKP,OAAL,CAAaQ,cAAb,CAA4BhB,aAA5B;AAA4C,eAAKQ,OAAL,CAAaS,uBAAb,CAAqCjB,aAArC;AAAqD,SAH9G;AAIA,QAAA,SAAS,EAAG,oBAAmBE,WAAY,IAAGQ,eAAgB,gBAAeD,eAAgB,aAJ7F;AAAA,gCAKA,QAAC,eAAD;AAAiB,UAAA,SAAS,EAAC,aAA3B;AAAyC,UAAA,IAAI,EAAEV;AAA/C;AAAA;AAAA;AAAA;AAAA,gBALA,EAMCc,OAND;AAAA;AAAA;AAAA;AAAA;AAAA,cAAV;AAOmB;;AACrB,wBACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACIC;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKD;;AAtC+B;;AAA5BlB,U,CACKsB,W,GAAc1B,O;AAuCzB,eAAeI,UAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Context from '../Context';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Tooltip from './Tooltip';\r\n\r\nclass IconButton extends Component{\r\n    static contextType = Context;\r\n    render(){\r\n    //change the icon depending if on the dashboard or bookmark page\r\n    const {ariaLabel, iconType, displayChange, link, buttonColor, tooltipMessage, tooltipClass, pageType} = this.props\r\n    let currentDisplay= this.context.currentDisplay;\r\n    let activeTypeClass='';\r\n    let activeUserClass='';\r\n    if(pageType){\r\n      activeUserClass = currentDisplay[pageType].current_user;\r\n      activeTypeClass = currentDisplay[pageType].current_post_type;\r\n    }\r\n\r\n    let tooltip =(<Tooltip message={`${tooltipMessage}.`} positionClass={tooltipClass}/>)\r\n    let button = (<button></button>)\r\n    if(iconType==='text-all'){\r\n        button = (<Link \r\n                 to={link}\r\n                 aria-label={`button-access ${ariaLabel}`}\r\n                 onClick={e=>{this.context.updatePostType(displayChange); this.context.updateUsernameToDisplay(displayChange);}}\r\n                 className={`button-icon-link button-w-text ${buttonColor} ${activeUserClass}-activeUsers ${activeTypeClass}-activeType`}>\r\n                 All\r\n                 {tooltip}\r\n                  </Link>)}\r\n    else{\r\n      button = (<Link \r\n                to={link}\r\n                aria-label={`button-access ${ariaLabel}`}\r\n                onClick={e=>{this.context.updatePostType(displayChange); this.context.updateUsernameToDisplay(displayChange);}}\r\n                className={`button-icon-link ${buttonColor} ${activeUserClass}-activeUsers ${activeTypeClass}-activeType`}>\r\n                <FontAwesomeIcon className=\"filter-icon\" icon={iconType} />\r\n                {tooltip}\r\n                </Link>)}\r\n    return(\r\n        <div className=\"icon-button-container\">\r\n           {button}\r\n        </div>\r\n    )\r\n  }\r\n}\r\nexport default IconButton; "]},"metadata":{},"sourceType":"module"}