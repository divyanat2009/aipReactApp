{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UpdateBookmark.js\";\nimport React, { Component } from 'react';\nimport '../_styles/Form.css';\nimport Context from '../Context';\nimport config from '../config.js';\n\nclass UpdateBookmark extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateChange = inputContent => {\n      let {\n        bookmarkContent\n      } = this.state;\n      bookmarkContent = {\n        value: inputContent,\n        touched: true\n      };\n      this.setState({\n        bookmarkContent: bookmarkContent\n      });\n    };\n\n    this.updateTouched = () => {\n      let {\n        bookmarkContent\n      } = this.state;\n      bookmarkContent = {\n        touched: false\n      };\n      this.setState({\n        bookmarkContent: bookmarkContent\n      });\n    };\n\n    this.handleClickCancel = () => {\n      //resets the state of the form to the bookmark's current state and not the form's state\n      let {\n        bookmarkContent\n      } = this.state;\n      bookmarkContent.value = this.props.bookmark_content || '';\n      this.setState({\n        bookmarkContent: bookmarkContent\n      });\n    };\n\n    this.handleSubmit = (e, bookmark_id) => {\n      e.preventDefault();\n      const {\n        bookmarkContent\n      } = this.state;\n      let updatedBookmark = {\n        content: bookmarkContent.value\n      };\n      let url = `${config.API_ENDPOINT}/bookmarks/${bookmark_id}`;\n      console.log(url);\n      fetch(url, {\n        method: 'PATCH',\n        body: JSON.stringify(updatedBookmark),\n        headers: {\n          'content-type': 'application/json' // 'authorization': `Bearer ${config.API_KEY}`\n\n        }\n      }).then(res => {\n        if (!res.ok) {\n          // get the error message from the response,\n          return res.json().then(error => {\n            // then throw it\n            throw error;\n          });\n        }\n\n        return;\n      }).then(resData => {\n        this.context.updateBookmark(bookmark_id, bookmarkContent.value);\n        this.updateTouched();\n      }).catch(error => {\n        this.setState({\n          error\n        });\n      });\n    };\n\n    this.state = {\n      error: null,\n      submitDisabled: true,\n      bookmarkContent: {\n        value: \"\",\n        touched: false\n      }\n    }; //end of state\n  }\n\n  componentDidMount() {\n    let {\n      bookmarkContent\n    } = this.state;\n    bookmarkContent.value = this.props.bookmark_content || '';\n    this.setState({\n      bookmarkContent: bookmarkContent\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"update-bookmark-form\",\n      onSubmit: e => this.handleSubmit(e, this.props.bookmark_id),\n      ref: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-intro\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Be sure to save any changes you make to this note.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-field-group field-description\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bookmark-content\",\n            children: \"Content*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"textarea\",\n            name: \"bookmark-content\",\n            id: \"bookmark-content\",\n            value: this.state.bookmarkContent.value,\n            onChange: e => this.updateChange(e.target.value),\n            className: `${this.state.bookmarkContent.touched ? \"red-font\" : \"\"} `\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-buttons button-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !this.state.bookmarkContent.touched,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"reset\",\n          onClick: this.handleClickCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nUpdateBookmark.contextType = Context;\nexport default UpdateBookmark;","map":{"version":3,"sources":["/Users/johnakhilomen/Downloads/aipBasicReactApp/src/Components/UpdateBookmark.js"],"names":["React","Component","Context","config","UpdateBookmark","constructor","props","updateChange","inputContent","bookmarkContent","state","value","touched","setState","updateTouched","handleClickCancel","bookmark_content","handleSubmit","e","bookmark_id","preventDefault","updatedBookmark","content","url","API_ENDPOINT","console","log","fetch","method","body","JSON","stringify","headers","then","res","ok","json","error","resData","context","updateBookmark","catch","submitDisabled","componentDidMount","render","target","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../_styles/Form.css';\nimport Context from '../Context';\nimport config from '../config.js';\n\nclass UpdateBookmark extends Component{\n    static contextType = Context;\n    constructor(props){\n        super(props);\n        this.state={\n            error:null,\n            submitDisabled:true,\n            bookmarkContent:{value:\"\",touched:false}\n        }//end of state\n    }\n\n    componentDidMount(){\n       let {bookmarkContent} = this.state;\n       bookmarkContent.value=this.props.bookmark_content || ''\n       this.setState({bookmarkContent:bookmarkContent})\n    }\n\n    updateChange=(inputContent)=>{\n       let {bookmarkContent} = this.state;\n       bookmarkContent={value:inputContent,touched:true}\n       this.setState({bookmarkContent:bookmarkContent})\n    }\n\n    updateTouched=()=>{\n       let {bookmarkContent} = this.state;\n       bookmarkContent={touched:false}\n       this.setState({bookmarkContent:bookmarkContent})\n    }\n\n    handleClickCancel=()=>{\n       //resets the state of the form to the bookmark's current state and not the form's state\n       let {bookmarkContent} = this.state;\n       bookmarkContent.value=this.props.bookmark_content || ''\n       this.setState({bookmarkContent:bookmarkContent})\n    }\n\n    handleSubmit=(e, bookmark_id)=>{\n       e.preventDefault();\n       const {bookmarkContent}=this.state;\n       let updatedBookmark = {\n        content:bookmarkContent.value\n       }\n\n       let url = `${config.API_ENDPOINT}/bookmarks/${bookmark_id}`\n       console.log(url)\n\n       fetch(url, {\n            method: 'PATCH',\n            body: JSON.stringify(updatedBookmark),\n            headers: {\n              'content-type': 'application/json',\n             // 'authorization': `Bearer ${config.API_KEY}`\n            }\n          })\n            .then(res => {\n              if (!res.ok) {\n                // get the error message from the response,\n                return res.json().then(error => {\n                 // then throw it\n                 throw error\n                })\n              }\n              return \n            })\n            .then(resData => {\n              this.context.updateBookmark(bookmark_id, bookmarkContent.value)\n              this.updateTouched()\n            })\n            .catch(error => {\n              this.setState({ error })\n            })\n       }\n\n    render(){             \n        return(\n            <form className=\"update-bookmark-form\" \n                onSubmit={e=>this.handleSubmit(e, this.props.bookmark_id)}\n                ref=\"form\">\n              <div className=\"form-intro\">\n               <p>Be sure to save any changes you make to this note.</p>\n               </div>\n                  <div>\n                     <div className=\"form-field-group field-description\">\n                        <label htmlFor=\"bookmark-content\">Content*</label>\n                        <textarea \n                            type=\"textarea\" name=\"bookmark-content\"\n                            id=\"bookmark-content\"\n                            value={this.state.bookmarkContent.value}\n                            onChange={e => this.updateChange(e.target.value)}\n                            className={`${this.state.bookmarkContent.touched ? \"red-font\" : \"\"} `}/>\n                     </div>                     \n                  </div>\n                  <div className=\"form-buttons button-row\">    \n                    <button type=\"submit\" disabled={\n                        (!this.state.bookmarkContent.touched)}>Save</button>\n                    <button type=\"reset\" onClick={this.handleClickCancel}>Cancel</button>\n                  </div>\n                </form>\n        )\n    }\n}\n\nexport default UpdateBookmark;\n"]},"metadata":{},"sourceType":"module"}