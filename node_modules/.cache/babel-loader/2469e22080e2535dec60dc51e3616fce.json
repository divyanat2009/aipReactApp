{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/johnakhilomen/Downloads/aipBasicReactApp/src/App.js\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport Home from './Components/Home';\nimport Dashboard from './Components/Dashboard';\nimport UserSignUp from './Components/UserSignUp';\nimport NewPost from './Components/NewPost';\nimport BookmarkPage from './Components/BookmarkPage';\nimport MyAccount from './Components/MyAccount';\nimport Context from './Context';\nimport config from './config';\nimport './_styles/App.css';\nimport data from './data';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updatePostType = displayChange => {\n      const {\n        currentDisplay,\n        currentUserInfo\n      } = this.state;\n      let currentUserId = currentUserInfo.user_id; //change the posts displayed depending on type of user selected\n\n      if (displayChange === 'allUsers' || displayChange === 'byUser' || displayChange === 'user') {\n        currentDisplay.dashboard.current_user = displayChange;\n        this.getPostsByUser(displayChange, currentUserId);\n      } //changes the display for type of post\n\n\n      if (displayChange === 'all' || displayChange === 'book' || displayChange === 'lifestyle' || displayChange === 'podcast' || displayChange === 'event' || displayChange === 'recipe') {\n        currentDisplay.dashboard.current_post_type = displayChange;\n      }\n\n      this.setState({\n        currentDisplay: currentDisplay\n      });\n    };\n\n    this.updateBookmark = (bookmarkId, updatedContent) => {\n      const {\n        bookmarks\n      } = this.state;\n      bookmarks.map(bookmark => {\n        if (bookmark.bookmark_id === bookmarkId) {\n          bookmark.bookmark_content = updatedContent;\n          return bookmark;\n        } else {\n          return bookmark;\n        }\n      }); // this.setState({bookmarks:newBookmarks})\n    };\n\n    this.updateUsernameToDisplay = name => {\n      const {\n        currentDisplay\n      } = this.state;\n\n      if (name === 'allUsers') {\n        currentDisplay.user_posts_displayed = \"all users\";\n      } else if (name === 'user') {\n        currentDisplay.user_posts_displayed = \"your own\";\n      }\n\n      this.setState({\n        currentDisplay: currentDisplay\n      });\n    };\n\n    this.addPost = newPost => {\n      this.setState({\n        posts: [...this.state.posts, newPost]\n      });\n    };\n\n    this.getBookmarkPostIds = bookmarks => {\n      let currentUserBookmarkedPostIds = bookmarks.map(bookmark => bookmark.post_id);\n      return currentUserBookmarkedPostIds;\n    };\n\n    this.updatePostsDisplayed = posts => {\n      this.setState({\n        posts: posts\n      });\n    };\n\n    this.deletePost = postId => {\n      const newPosts = this.state.posts.filter(post => post.post_id !== postId);\n      this.setState({\n        posts: newPosts\n      });\n    };\n\n    this.deleteBookmark = bookmarkId => {\n      const newBookmarkPosts = this.state.bookmarks.filter(bookmark => bookmark.bookmark_id !== bookmarkId);\n      this.setState({\n        bookmarks: newBookmarkPosts\n      });\n    };\n\n    this.addBookmark = newBookmarkPost => {\n      this.setState({\n        bookmarks: [...this.state.bookmarks, newBookmarkPost]\n      });\n    };\n\n    this.getPostsByUser = (userToDisplay, currentUserId) => {\n      let url = `${config.API_ENDPOINT}/posts`;\n      currentUserId = this.state.currentUserInfo.user_id;\n\n      if (userToDisplay === 'allUsers') {\n        url = `${config.API_ENDPOINT}/posts`;\n      } else if (userToDisplay === 'user') {\n        url = `${config.API_ENDPOINT}/posts?userid=${currentUserId}`;\n      } else {\n        url = `${config.API_ENDPOINT}/posts?userid=${userToDisplay}`;\n      }\n\n      fetch(url, {\n        method: 'GET',\n        header: {\n          'content-type': 'application/json' // 'Authorization':`Bearer ${config.API_KEY}`\n\n        }\n      }).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again');\n        }\n\n        return res.json();\n      }).then(postdata => {\n        this.updatePostType('all');\n        this.updatePostsDisplayed(postdata);\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.getUsers = () => {\n      fetch(`${config.API_ENDPOINT}/users`, {\n        method: 'GET',\n        header: {\n          'content-type': 'application/json' // 'Authorization':`Bearer ${config.API_KEY}`\n\n        }\n      }).then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again');\n        }\n\n        return res.json();\n      }).then(userdata => {\n        this.setState({\n          users: userdata\n        });\n      }).catch(err => {\n        this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    this.state = {\n      currentUserInfo: {\n        \"user_id\": 1,\n        \"username\": \"divyanat\",\n        \"fullname\": \"Divya Natarajan\"\n      },\n      posts: data.posts,\n      bookmarks: data.bookmarks,\n      users: data.users,\n      currentDisplay: {\n        type_posts_displayed: 'all',\n        dashboard: {\n          current_post_type: 'all'\n        },\n        bookmark_display: {\n          current_post_type: 'all'\n        }\n      }\n    }; //end of state\n  } //filter buttons function to update type of post displayed\n\n\n  componentDidMount() {\n    this.setState({\n      error: null\n    }); //getting users\n\n    this.getUsers();\n  }\n\n  render() {\n    const contextValue = {\n      currentUserInfo: this.state.currentUserInfo,\n      posts: this.state.posts,\n      bookmarks: this.state.bookmarks,\n      users: this.state.users,\n      currentDisplay: this.state.currentDisplay,\n      updatePostType: this.updatePostType,\n      updatePostsDisplayed: this.updatePostsDisplayed,\n      addPost: this.addPost,\n      getPostsByUser: this.getPostsByUser,\n      updateUsernameToDisplay: this.updateUsernameToDisplay,\n      deletePost: this.deletePost,\n      addBookmark: this.addBookmark,\n      updateBookmark: this.updateBookmark,\n      deleteBookmark: this.deleteBookmark\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Context.Provider, {\n        value: contextValue,\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: Home\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/:username/dashboard\",\n          component: Dashboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/bookmarks\",\n          component: BookmarkPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/user-signup\",\n          component: UserSignUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \":username/new-post\",\n          component: NewPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \":username/my-account\",\n          component: MyAccount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/johnakhilomen/Downloads/aipBasicReactApp/src/App.js"],"names":["React","Component","Route","Home","Dashboard","UserSignUp","NewPost","BookmarkPage","MyAccount","Context","config","data","App","constructor","props","updatePostType","displayChange","currentDisplay","currentUserInfo","state","currentUserId","user_id","dashboard","current_user","getPostsByUser","current_post_type","setState","updateBookmark","bookmarkId","updatedContent","bookmarks","map","bookmark","bookmark_id","bookmark_content","updateUsernameToDisplay","name","user_posts_displayed","addPost","newPost","posts","getBookmarkPostIds","currentUserBookmarkedPostIds","post_id","updatePostsDisplayed","deletePost","postId","newPosts","filter","post","deleteBookmark","newBookmarkPosts","addBookmark","newBookmarkPost","userToDisplay","url","API_ENDPOINT","fetch","method","header","then","res","ok","Error","json","postdata","catch","err","error","message","getUsers","userdata","users","type_posts_displayed","bookmark_display","componentDidMount","render","contextValue"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport Home from './Components/Home';\nimport Dashboard from './Components/Dashboard';\nimport UserSignUp from './Components/UserSignUp';\nimport NewPost from './Components/NewPost';\nimport BookmarkPage from './Components/BookmarkPage';\nimport MyAccount from './Components/MyAccount';\nimport Context from './Context';\nimport config from './config';\nimport './_styles/App.css';\nimport data from './data';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      currentUserInfo:{ \"user_id\":1,\n                        \"username\":\"divyanat\",  \n                        \"fullname\":\"Divya Natarajan\"},\n      posts:data.posts,\n      bookmarks:data.bookmarks,\n      users:data.users,            \n      currentDisplay:{\n        type_posts_displayed:'all',\n        dashboard:{ current_post_type:'all'},\n        bookmark_display:{current_post_type:'all'}\n      }\n    }//end of state\n\n  }\n  //filter buttons function to update type of post displayed\n  updatePostType=(displayChange)=>{\n    const {currentDisplay,currentUserInfo} = this.state;\n    let currentUserId = currentUserInfo.user_id;\n    //change the posts displayed depending on type of user selected\n    if(displayChange ==='allUsers' || displayChange ==='byUser' || displayChange ==='user'){\n      currentDisplay.dashboard.current_user=displayChange;\n      this.getPostsByUser(displayChange,currentUserId)\n    }\n    //changes the display for type of post\n    if(displayChange ==='all' || displayChange ==='book' || displayChange === 'lifestyle' || displayChange ===\n      'podcast' || displayChange === 'event' || displayChange === 'recipe'){\n      currentDisplay.dashboard.current_post_type=displayChange;\n  }  \n      \n  this.setState({\n    currentDisplay:currentDisplay})\n  }\n  updateBookmark=(bookmarkId, updatedContent)=>{  \n    const { bookmarks } = this.state;\n    bookmarks.map(bookmark=>{\n      if(bookmark.bookmark_id===bookmarkId) \n      { bookmark.bookmark_content=updatedContent\n         return bookmark}\n        else {return bookmark}}\n    )  \n   // this.setState({bookmarks:newBookmarks})\n  }\n  updateUsernameToDisplay=(name)=>{\n    const {currentDisplay} = this.state;\n    if(name==='allUsers'){\n      currentDisplay.user_posts_displayed=\"all users\"\n    }\n    else if(name==='user'){\n      currentDisplay.user_posts_displayed=\"your own\"\n    }\n    this.setState({\n      currentDisplay:currentDisplay})\n  }\n  addPost=(newPost)=>{\n    this.setState({\n    posts:[...this.state.posts, newPost]\n    })  \n  }\n  getBookmarkPostIds=(bookmarks)=>{\n    let currentUserBookmarkedPostIds = bookmarks.map(bookmark=>bookmark.post_id);\n    return currentUserBookmarkedPostIds;\n  }\n  updatePostsDisplayed=(posts)=>{\n    this.setState({\n      posts:posts\n    })\n  }\n  deletePost=(postId)=>{\n    const newPosts = this.state.posts.filter(post=>\n      post.post_id !== postId)  \n      this.setState({\n      posts:newPosts\n    })\n  }\n  deleteBookmark=(bookmarkId)=>{\n    const newBookmarkPosts = this.state.bookmarks.filter(bookmark=>\n      bookmark.bookmark_id !== bookmarkId)    \n      this.setState({\n      bookmarks:newBookmarkPosts\n    })    \n  }\n\n  addBookmark=(newBookmarkPost)=>{    \n    this.setState({\n      bookmarks:[...this.state.bookmarks, newBookmarkPost]\n    })\n  }\n  getPostsByUser=(userToDisplay,currentUserId)=>{    \n    let url = `${config.API_ENDPOINT}/posts`\n    currentUserId = this.state.currentUserInfo.user_id\n\n    if(userToDisplay==='allUsers'){\n      url = `${config.API_ENDPOINT}/posts`    \n    }\n    else if(userToDisplay==='user'){\n      url = `${config.API_ENDPOINT}/posts?userid=${currentUserId}`      \n    }\n    else {\n      url = `${config.API_ENDPOINT}/posts?userid=${userToDisplay}`      \n    }\n\n    fetch(url,{\n        method:'GET',\n        header:{\n        'content-type':'application/json',\n        // 'Authorization':`Bearer ${config.API_KEY}`\n        },\n    })\n    .then(res=>{\n        if(!res.ok){\n        throw new Error('Something went wrong, please try again')\n        }\n        return res.json()\n    })\n    .then(postdata=>{      \n      this.updatePostType('all');\n      this.updatePostsDisplayed(postdata)\n    })\n    .catch(err=>{\n      this.setState({\n        error:err.message\n      });\n    })\n}\n\ngetUsers=()=>{\n  fetch(`${config.API_ENDPOINT}/users`,{\n    method:'GET',\n    header:{\n      'content-type':'application/json',\n     // 'Authorization':`Bearer ${config.API_KEY}`\n    },\n  })\n  .then(res=>{\n    if(!res.ok){\n      throw new Error('Something went wrong, please try again')\n    }\n    return res.json()\n  })\n  .then(userdata=>{   \n    this.setState({\n      users:userdata\n    })\n  })\n  .catch(err=>{\n    this.setState({\n      error:err.message\n    })\n  })\n}\ncomponentDidMount(){\n  this.setState({error:null})\n  //getting users\n  this.getUsers();\n}\n\n\n  render () {\n    const contextValue={\n      currentUserInfo:this.state.currentUserInfo,\n      posts:this.state.posts,\n      bookmarks:this.state.bookmarks,\n      users:this.state.users,\n      currentDisplay:this.state.currentDisplay,\n      updatePostType:this.updatePostType,\n      updatePostsDisplayed:this.updatePostsDisplayed,\n      addPost:this.addPost,\n      getPostsByUser:this.getPostsByUser,\n      updateUsernameToDisplay:this.updateUsernameToDisplay,\n      deletePost:this.deletePost,\n      addBookmark:this.addBookmark,\n      updateBookmark:this.updateBookmark,\n      deleteBookmark:this.deleteBookmark,\n    }\n    return (\n      <div className=\"App\">\n        <Context.Provider value={contextValue}>\n          <Route exact path=\"/\" component={Home}/>\n          <Route exact path=\"/:username/dashboard\" component={Dashboard}/>\n          <Route exact path=\"/bookmarks\" component={BookmarkPage}/>\n          <Route exact path=\"/user-signup\" component={UserSignUp}/>\n          <Route exact path=\":username/new-post\" component={NewPost}/>\n          <Route exact path=\":username/my-account\" component={MyAccount}/>        \n        </Context.Provider>\n      </div>\n    );\n  }\n}      \nexport default App;\n"]},"metadata":{},"sourceType":"module"}